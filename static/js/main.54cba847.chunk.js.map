{"version":3,"sources":["components/form.jsx","components/temperature.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getInputValue","type","name","placeholder","Temp","className","this","temp","Component","App","state","city","translit","text","arrru","arren","i","length","reg","RegExp","replace","_this","setState","_callee","e","typedVal","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","userName","value","console","log","axios","get","concat","then","res","data","main","catch","stop","components_form","temperature","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54cba847.chunk.js","sourcesContent":["import React from 'react'\n\nconst Form = props => {\n    return (\n        <form onSubmit={props.getInputValue}>\n          <input type=\"text\" name=\"userName\" placeholder=\"Type you city\"/>\n          <button type=\"submit\">Get weather</button>\n        </form>\n      );\n}\n\nexport default Form;\n","import React from 'react'\nimport { Component } from 'react';\n\nclass Temp extends Component {\n    render() {\n        return (\n          <div className=\"temp\">\n            <p>{this.props.temp === '' ? \"Choose your city\" : this.props.temp}</p>\n          </div>\n        )\n      }\n}\n\nexport default Temp;\n\n","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Form from './components/form';\nimport { Component } from 'react';\nimport Temp from './components/temperature';\n\nclass App extends Component {\n  state = {\n    city: 'kyiv',\n    temp: ''\n  }\n\n  translit = text => {\n    const arrru = ['Я', 'я', 'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А', 'а', 'Б', 'б', 'В', 'в', 'Г', 'г', 'Д', 'д', 'Е', 'е', \n                   'Ё', 'ё', 'З', 'з', 'И', 'и', 'Й', 'й', 'К', 'к', 'Л', 'л', 'М', 'м', 'Н', 'н', 'О', 'о', 'П', 'п', 'Р', 'р', 'С', 'с', \n                   'Т', 'т', 'У', 'у', 'Ф', 'ф', 'Х', 'х', 'Ц', 'ц', 'Ы', 'ы', 'Ь', 'ь', 'Ъ', 'ъ', 'Э', 'э'];\n    const arren = ['Ya', 'ya', 'Yu', 'yu', 'Ch', 'ch', 'Sh', 'sh', 'Sh', 'sh', 'Zh', 'zh', 'A', 'a', 'B', 'b', 'V', 'v', 'G', 'g', 'D', 'd',\n                   'E', 'e', 'E', 'e', 'Z', 'z', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r',\n                   'S', 's', 'T', 't', 'U', 'u', 'F', 'f', 'H', 'h', 'C', 'c', 'Y', 'y', '`', '`', '\\'', '\\'', 'E', 'e'];\n    for (var i = 0; i < arrru.length; i++) {\n      let reg = new RegExp(arrru[i], \"g\");\n      text = text.replace(reg, arren[i]);\n    }\n    this.setState({city: text});\n  }\n\n  getInputValue = async e => {\n    e.preventDefault();\n    const typedVal = e.target.elements.userName.value;\n    await this.translit(typedVal);\n    console.log(this.state.city)\n    if (typedVal !== ''){\n      // await this.setState ({city: e.target.elements.userName.value})\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=abc86827a442a37058277f8ff5d688ed&units=metric`)\n        .then((res) => {\n          this.setState({temp: res.data.main.temp + \"°\"});\n          console.log(res)\n        }).catch(() => {\n          this.setState({temp: 'Unknown city...'})\n        });\n    } else\n      this.setState({temp: 'Type your city first!'})\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form getInputValue={this.getInputValue}/>\n        <Temp temp={this.state.temp}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}